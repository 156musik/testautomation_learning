# 自動化について

「自動化の目的と基礎を理解しつつ、簡単なスクリプトから少しずつ体験していく」のが最も現実的で無理のない進め方です。  
以下のステップをおすすめします。

---

## 【ステップ1】テスト自動化の基本を理解する

### やること
- なぜテストを自動化するのか（目的・メリット・デメリット）を整理
- どんなテストが自動化に向いているかを学ぶ
- Playwrightの概要と仕組み（ヘッドレスブラウザ、DOM操作など）を簡単に理解する

### おすすめリソース
- JSTQBテスト自動化エンジニアシラバス（初級者でも概要の章だけは読める）
- Playwright公式ドキュメント（図や用語を中心に読む）
- YouTubeでの「Playwright 初心者向けチュートリアル」

---

## 【ステップ2】Playwrightで「テストを読む」ことから始める

### やること
- 公式のサンプルコードを動かしてみる
- 実行されているテスト内容を、自然言語に変換してみる  
  （例：「ログインページにアクセスし、ログインボタンをクリックする」など）

### 目標
- コードの意味をなんとなくでも理解すること
- 「このコードが何をしているか」を言葉で説明できるようになる

---

## 【ステップ3】Playwrightで簡単な操作を自動化してみる

### やること
- コピペから始めてOK。以下のようなことを自動化してみる
  - Webサイトを開く
  - テキストを入力する
  - ボタンをクリックする
  - 結果を確認する（assertion）

### 目標
- 自分の操作がスクリプトで動くことを体感
- 「実行→画面が動く」喜びを得る

---

## 【ステップ4】テストシナリオを自分で作ってみる

### やること
- 以前に作成したテスト項目書の一部を、自動化できるように置き換えてみる
  - 例：ログイン成功／失敗のテストを自動化してみる

### 補足
- 現段階では「すべて自分で書く」必要はなく、公式ドキュメントやChatGPTに「この操作をPlaywrightでどう書くか？」と尋ねながら進めてOK

---

## 【ステップ5】自動テストをプロジェクト化して管理する

### やること
- テストケースを複数作成して、ディレクトリ分けする
- テストデータを外部ファイル（JSONやCSV）で管理する方法を学ぶ

---

## 【補足】スキルの積み方のポイント
- わからない用語はすぐ調べず、文脈で「だいたいこうかな」でOK（あとで整理すればよい）
- ChatGPTを「ペアプログラマ」として使う  
  （「このコードの意味は？」「こういうテストを作るにはどうする？」と聞く）

---
